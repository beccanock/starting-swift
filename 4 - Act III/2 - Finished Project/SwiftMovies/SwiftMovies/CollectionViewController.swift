//
//  MovieCollectionController.swift
//  SwiftMovies
//
//  Created by Tom Piarulli on 1/8/15.
//  Copyright (c) 2015 Philly Cocoaheads. All rights reserved.
//

import UIKit

// Since we don't have to worry about headers and imports in Swift
// It sometimes makes sense to keep multiple classes in the same file
final class MovieCell: UICollectionViewCell {
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    @IBOutlet weak var imageView: UIImageView!
}

final class CollectionViewController: UIViewController {
    @IBOutlet weak var collectionView: UICollectionView!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    
    var movies: [Movie] = []
    var activeList: TMDB.MovieList = .Popular // We can exclude the enum name and just use .Type
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.navigationItem.title = self.activeList.listName
        self.refreshMovieResults()
    }
    
    func refreshMovieResults() {
        self.activityIndicator.startAnimating()
        
        // Swift allows a shorthand if a closure is the last parameter
        // of a function, as seen here
        TMDB.fetchMovieList(self.activeList) {
            self.activityIndicator.stopAnimating()
            
            // When we use the shorthand we don't have a named result
            // so we need to reference parameters by position $0, $1, etc.
            // these are automatic shorthand argument names generated by Swift
            switch $0 {
            case .Success(let results):
                self.movies = results
                self.collectionView.reloadData()
            case .Failure:
                let errorMessage = "There was an issue refreshing movies. Please check your connection or try again later."
                let alert = UIAlertController(title: "Sorry", message: errorMessage, preferredStyle: UIAlertControllerStyle.Alert)
                alert.addAction(UIAlertAction(title: "Okay", style: UIAlertActionStyle.Default, handler: nil))
                self.presentViewController(alert, animated: true, completion: nil)
            }
        }
    }
    
    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
        if segue.identifier == "showMovieView" {
            // We use "as" to typecast to a certain object type
            let movieController = segue.destinationViewController as DetailViewController
            let indexPath = self.collectionView.indexPathsForSelectedItems().first as NSIndexPath?
            if let selectedPath = indexPath {
                // Pass the selected movie to detail view
                let movie = self.movies[selectedPath.row]
                movieController.movie = movie
            }
        }
        
        if segue.identifier == "showFilterView" {
            // We use "as" to typecast to a certain object type
            let navController = segue.destinationViewController as UINavigationController
            let filterController = navController.viewControllers.first as FilterViewController
            // By setting the delegate to this controller we receive updates when the filter changes.
            filterController.delegate = self
        }
    }
}

// Class extensions make it easy to group functionality, like protocol methods
extension CollectionViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.movies.count
    }
    
    func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {
        let movieCell = collectionView.dequeueReusableCellWithReuseIdentifier("movieCell", forIndexPath: indexPath) as MovieCell
        let movie = self.movies[indexPath.row]
        
        // Set poster to nil while loading
        movieCell.imageView.image = nil
        movieCell.activityIndicator.startAnimating()
        
        movie.loadPosterImage() {
            switch $0 {
            case .Success(let posterImage):
                movieCell.imageView.image = posterImage
            case .Failure:
                movieCell.imageView.image = UIImage(named: "noPoster")
            }
            
            movieCell.activityIndicator.stopAnimating()
        }
        
        return movieCell
    }
}

extension CollectionViewController: FilterViewDelegate {
    func filterDidChange(list: TMDB.MovieList) {
        self.activeList = list
        self.navigationItem.title = list.listName
        // We want the collectionview to scroll back to the top instantly on list change
        self.collectionView.setContentOffset(CGPoint(x: 0, y:-self.collectionView.contentInset.top), animated: false)
        self.refreshMovieResults()
    }
}
